{"ast":null,"code":"var _jsxFileName = \"/home/leo/MoringaSchool/phs-3/phs-3-MEME-GENERATOR_frontend/src/MemeGenerator.js\",\n  _s = $RefreshSig$();\n// import React, {Component} from \"react\";\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MemeGenerator() {\n  _s();\n  const [memeData, setMemeData] = useState([]);\n  const [text, setText] = useState({\n    topText: '',\n    bottomText: ''\n  });\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:9292/memes\").then(res => res.json()).then(data => setMemeData(data));\n  }, []);\n  console.log(memeData);\n  function handleTop(event) {\n    console.log(\"working!\");\n    setText({\n      ...text,\n      topText: event.target.value\n    });\n  }\n  function handleBottom(event) {\n    console.log(\"working!\");\n    setText({\n      ...text,\n      bottomText: event.target.value\n    });\n  }\n  function handleSubmit(event) {\n    event.preventDefault();\n    console.log(text);\n    // const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n    // const randMemeImg = this.state.allMemeImgs[randNum].url\n    // this.setState({ randomImg: randMemeImg})\n  }\n\n  function randNum() {\n    return Math.floor(Math.random() * 15) + 1;\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"meme-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"topText\",\n        placeholder: \"Top Text\",\n        value: text.topText,\n        onChange: handleTop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"bottomText\",\n        placeholder: \"Bottom Text\",\n        value: text.bottomText,\n        onChange: handleBottom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Generate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: randNum()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        scr: memeData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"bottom\",\n        children: text.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n// class MemeGenerator extends Component {\n//     constructor(){\n//         super()\n//         this.state = {\n//             topText: \"\",\n//             bottomText:\"\",\n//             randomImg: \"https://i.imgflip.com/261o3j.jpg\",\n//             allMemeImgs: []\n//         }\n//         this.handleChange = this.handleChange.bind(this)\n//         this.handleSubmit = this.handleSubmit.bind(this)\n//     }\n//     componentDidMount() {\n//         fetch(\"http://127.0.0.1:9292/memes\")\n//             .then(response => response.json())\n//             .then(response => {\n//                 const {memes} = response.memes\n//                 console.log(\"Hi\")\n//                 console.log(memes)\n//                 this.setState({allMemeImgs: memes})\n//             })\n//     }\n//     handleChange(event){\n//          console.log(\"working!\")\n//         const {name, value} = event.target\n//         this.setState({[name]: value})\n//     }\n//     handleSubmit(event){\n//         event.preventDefault()\n//         const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n//         const randMemeImg = this.state.allMemeImgs[randNum].url\n//         this.setState({ randomImg: randMemeImg})\n//     }\n//     render(){\n//         return(\n//              <div>\n//                 <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n//                     <input\n//                         type = \"text\"\n//                         name = \"topText\"\n//                         placeholder=\"Top Text\"\n//                         value = {this.state.topText}\n//                         onChange = {this.handleChange}\n//                     />\n//                     <input\n//                         type = \"text\"\n//                         name = \"bottomText\"\n//                         placeholder=\"Bottom Text\"\n//                         value = {this.state.bottomText}\n//                         onChange = {this.handleChange}\n//                     />\n//                     <button>Generate</button>\n//                 </form>\n//                 <div className=\"meme\">\n//                     <img src={this.state.randomImg} alt=\"\"/>\n//                     <h2 className=\"top\">{this.state.topText}</h2>\n//                     <h2 className=\"bottom\">{this.state.bottomText}</h2>\n//                 </div>\n//              </div>\n//         )\n//     }\n// }\n_s(MemeGenerator, \"WelIBaR6EUpn47wlEJKHBg6Vig8=\");\n_c = MemeGenerator;\nexport default MemeGenerator;\nvar _c;\n$RefreshReg$(_c, \"MemeGenerator\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","MemeGenerator","_s","memeData","setMemeData","text","setText","topText","bottomText","fetch","then","res","json","data","console","log","handleTop","event","target","value","handleBottom","handleSubmit","preventDefault","randNum","Math","floor","random","children","className","onSubmit","type","name","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","scr","_c","$RefreshReg$"],"sources":["/home/leo/MoringaSchool/phs-3/phs-3-MEME-GENERATOR_frontend/src/MemeGenerator.js"],"sourcesContent":["// import React, {Component} from \"react\";\n\nimport React, { useEffect, useState } from 'react'\n\nfunction MemeGenerator() {\n    const [memeData, setMemeData] = useState([])\n    const [text, setText] = useState({\n        topText: '',\n        bottomText: ''\n    })\n    useEffect(()=>{\n        fetch(\"http://127.0.0.1:9292/memes\")\n            .then(res => res.json())\n            .then(data => setMemeData(data))\n    },[])\n\n    console.log(memeData)\n\n\n    function handleTop(event){\n        console.log(\"working!\")\n        setText({...text, topText: event.target.value})\n    }\n    function handleBottom(event){\n        console.log(\"working!\")\n        setText({...text, bottomText: event.target.value})\n    }\n\n    function handleSubmit(event){\n        event.preventDefault()\n        console.log(text)\n        // const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n        // const randMemeImg = this.state.allMemeImgs[randNum].url\n        // this.setState({ randomImg: randMemeImg})\n    }\n\n    function randNum(){\n        return(Math.floor(Math.random() * 15) + 1)\n    }\n\n    return (\n        <>\n            <form className=\"meme-form\" onSubmit={handleSubmit}>\n                <input\n                    type = \"text\"\n                    name = \"topText\"\n                    placeholder=\"Top Text\"\n                    value = {text.topText}\n                    onChange = {handleTop}\n                />\n                <input\n                    type = \"text\"\n                    name = \"bottomText\"\n                    placeholder=\"Bottom Text\"\n                    value = {text.bottomText}\n                    onChange = {handleBottom}\n                />\n                <button>Generate</button>\n                <h1>{randNum()}</h1>\n                \n            </form>\n            <div className=\"meme\">\n                <img scr={memeData}/>\n                \n                <h2 className=\"bottom\">{text.bottomText}</h2>\n            </div>\n        \n        </>\n    )\n}\n\n\n// class MemeGenerator extends Component {\n//     constructor(){\n//         super()\n//         this.state = {\n//             topText: \"\",\n//             bottomText:\"\",\n//             randomImg: \"https://i.imgflip.com/261o3j.jpg\",\n//             allMemeImgs: []\n//         }\n//         this.handleChange = this.handleChange.bind(this)\n//         this.handleSubmit = this.handleSubmit.bind(this)\n//     }\n//     componentDidMount() {\n//         fetch(\"http://127.0.0.1:9292/memes\")\n//             .then(response => response.json())\n//             .then(response => {\n//                 const {memes} = response.memes\n//                 console.log(\"Hi\")\n//                 console.log(memes)\n//                 this.setState({allMemeImgs: memes})\n//             })\n//     }\n//     handleChange(event){\n//          console.log(\"working!\")\n//         const {name, value} = event.target\n//         this.setState({[name]: value})\n//     }\n//     handleSubmit(event){\n//         event.preventDefault()\n//         const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n//         const randMemeImg = this.state.allMemeImgs[randNum].url\n//         this.setState({ randomImg: randMemeImg})\n//     }\n//     render(){\n//         return(\n//              <div>\n//                 <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n//                     <input\n//                         type = \"text\"\n//                         name = \"topText\"\n//                         placeholder=\"Top Text\"\n//                         value = {this.state.topText}\n//                         onChange = {this.handleChange}\n//                     />\n//                     <input\n//                         type = \"text\"\n//                         name = \"bottomText\"\n//                         placeholder=\"Bottom Text\"\n//                         value = {this.state.bottomText}\n//                         onChange = {this.handleChange}\n//                     />\n//                     <button>Generate</button>\n//                 </form>\n//                 <div className=\"meme\">\n//                     <img src={this.state.randomImg} alt=\"\"/>\n//                     <h2 className=\"top\">{this.state.topText}</h2>\n//                     <h2 className=\"bottom\">{this.state.bottomText}</h2>\n//                 </div>\n//              </div>\n//         )\n//     }\n// }\nexport default MemeGenerator"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}