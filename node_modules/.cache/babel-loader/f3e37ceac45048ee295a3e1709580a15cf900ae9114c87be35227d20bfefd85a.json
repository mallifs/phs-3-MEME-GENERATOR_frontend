{"ast":null,"code":"var _jsxFileName = \"/home/leo/MoringaSchool/phs-3/phs-3-MEME-GENERATOR_frontend/src/MemeGenerator.js\",\n  _s = $RefreshSig$();\n// import React, {Component} from \"react\";\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MemeGenerator() {\n  _s();\n  const [memeData, setMemeData] = useState([]);\n  const [text, setText] = useEffect;\n  useEffect(() => {\n    fetch(\"http://127.0.0.1:9292/memes\").then(res => res.json()).then(data => setMemeData(data));\n  }, []);\n  console.log(memeData);\n  function handleChange(event) {\n    console.log(\"working!\");\n    const {\n      name,\n      value\n    } = event.target;\n    this.setState({\n      [name]: value\n    });\n  }\n  function handleSubmit(event) {\n    event.preventDefault();\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n    const randMemeImg = this.state.allMemeImgs[randNum].url;\n    this.setState({\n      randomImg: randMemeImg\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"meme-form\",\n      onSubmit: this.handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"topText\",\n        placeholder: \"Top Text\",\n        value: this.state.topText,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"bottomText\",\n        placeholder: \"Bottom Text\",\n        value: this.state.bottomText,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Generate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: this.state.randomImg,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"top\",\n        children: this.state.topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"bottom\",\n        children: this.state.bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n// class MemeGenerator extends Component {\n//     constructor(){\n//         super()\n//         this.state = {\n//             topText: \"\",\n//             bottomText:\"\",\n//             randomImg: \"https://i.imgflip.com/261o3j.jpg\",\n//             allMemeImgs: []\n//         }\n//         this.handleChange = this.handleChange.bind(this)\n//         this.handleSubmit = this.handleSubmit.bind(this)\n//     }\n//     componentDidMount() {\n//         fetch(\"http://127.0.0.1:9292/memes\")\n//             .then(response => response.json())\n//             .then(response => {\n//                 const {memes} = response.memes\n//                 console.log(\"Hi\")\n//                 console.log(memes)\n//                 this.setState({allMemeImgs: memes})\n//             })\n//     }\n//     handleChange(event){\n//          console.log(\"working!\")\n//         const {name, value} = event.target\n//         this.setState({[name]: value})\n//     }\n//     handleSubmit(event){\n//         event.preventDefault()\n//         const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n//         const randMemeImg = this.state.allMemeImgs[randNum].url\n//         this.setState({ randomImg: randMemeImg})\n//     }\n//     render(){\n//         return(\n//              <div>\n//                 <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n//                     <input\n//                         type = \"text\"\n//                         name = \"topText\"\n//                         placeholder=\"Top Text\"\n//                         value = {this.state.topText}\n//                         onChange = {this.handleChange}\n//                     />\n//                     <input\n//                         type = \"text\"\n//                         name = \"bottomText\"\n//                         placeholder=\"Bottom Text\"\n//                         value = {this.state.bottomText}\n//                         onChange = {this.handleChange}\n//                     />\n//                     <button>Generate</button>\n//                 </form>\n//                 <div className=\"meme\">\n//                     <img src={this.state.randomImg} alt=\"\"/>\n//                     <h2 className=\"top\">{this.state.topText}</h2>\n//                     <h2 className=\"bottom\">{this.state.bottomText}</h2>\n//                 </div>\n//              </div>\n//         )\n//     }\n// }\n_s(MemeGenerator, \"7v0sK4bbuOuF0q00T1EVMnqI4I4=\");\n_c = MemeGenerator;\nexport default MemeGenerator;\nvar _c;\n$RefreshReg$(_c, \"MemeGenerator\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","MemeGenerator","_s","memeData","setMemeData","text","setText","fetch","then","res","json","data","console","log","handleChange","event","name","value","target","setState","handleSubmit","preventDefault","randNum","Math","floor","random","state","allMemeImgs","length","randMemeImg","url","randomImg","children","className","onSubmit","type","placeholder","topText","onChange","fileName","_jsxFileName","lineNumber","columnNumber","bottomText","src","alt","_c","$RefreshReg$"],"sources":["/home/leo/MoringaSchool/phs-3/phs-3-MEME-GENERATOR_frontend/src/MemeGenerator.js"],"sourcesContent":["// import React, {Component} from \"react\";\n\nimport React, { useEffect, useState } from 'react'\n\nfunction MemeGenerator() {\n    const [memeData, setMemeData] = useState([])\n    const [text, setText] = useEffect\n    useEffect(()=>{\n        fetch(\"http://127.0.0.1:9292/memes\")\n            .then(res => res.json())\n            .then(data => setMemeData(data))\n    },[])\n\n    console.log(memeData)\n\n\n    function handleChange(event){\n        console.log(\"working!\")\n        const {name, value} = event.target\n        this.setState({[name]: value})\n    }\n\n    function handleSubmit(event){\n        event.preventDefault()\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n        const randMemeImg = this.state.allMemeImgs[randNum].url\n        this.setState({ randomImg: randMemeImg})\n    }\n\n    return (\n        <div>\n            <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n                <input\n                    type = \"text\"\n                    name = \"topText\"\n                    placeholder=\"Top Text\"\n                    value = {this.state.topText}\n                    onChange = {this.handleChange}\n                />\n                <input\n                    type = \"text\"\n                    name = \"bottomText\"\n                    placeholder=\"Bottom Text\"\n                    value = {this.state.bottomText}\n                    onChange = {this.handleChange}\n                />\n                <button>Generate</button>\n            </form>\n            <div className=\"meme\">\n                <img src={this.state.randomImg} alt=\"\"/>\n                <h2 className=\"top\">{this.state.topText}</h2>\n                <h2 className=\"bottom\">{this.state.bottomText}</h2>\n            </div>\n        </div>\n    )\n}\n\n\n// class MemeGenerator extends Component {\n//     constructor(){\n//         super()\n//         this.state = {\n//             topText: \"\",\n//             bottomText:\"\",\n//             randomImg: \"https://i.imgflip.com/261o3j.jpg\",\n//             allMemeImgs: []\n//         }\n//         this.handleChange = this.handleChange.bind(this)\n//         this.handleSubmit = this.handleSubmit.bind(this)\n//     }\n//     componentDidMount() {\n//         fetch(\"http://127.0.0.1:9292/memes\")\n//             .then(response => response.json())\n//             .then(response => {\n//                 const {memes} = response.memes\n//                 console.log(\"Hi\")\n//                 console.log(memes)\n//                 this.setState({allMemeImgs: memes})\n//             })\n//     }\n//     handleChange(event){\n//          console.log(\"working!\")\n//         const {name, value} = event.target\n//         this.setState({[name]: value})\n//     }\n//     handleSubmit(event){\n//         event.preventDefault()\n//         const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n//         const randMemeImg = this.state.allMemeImgs[randNum].url\n//         this.setState({ randomImg: randMemeImg})\n//     }\n//     render(){\n//         return(\n//              <div>\n//                 <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n//                     <input\n//                         type = \"text\"\n//                         name = \"topText\"\n//                         placeholder=\"Top Text\"\n//                         value = {this.state.topText}\n//                         onChange = {this.handleChange}\n//                     />\n//                     <input\n//                         type = \"text\"\n//                         name = \"bottomText\"\n//                         placeholder=\"Bottom Text\"\n//                         value = {this.state.bottomText}\n//                         onChange = {this.handleChange}\n//                     />\n//                     <button>Generate</button>\n//                 </form>\n//                 <div className=\"meme\">\n//                     <img src={this.state.randomImg} alt=\"\"/>\n//                     <h2 className=\"top\">{this.state.topText}</h2>\n//                     <h2 className=\"bottom\">{this.state.bottomText}</h2>\n//                 </div>\n//              </div>\n//         )\n//     }\n// }\nexport default MemeGenerator"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}